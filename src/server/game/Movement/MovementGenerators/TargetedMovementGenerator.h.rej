--- src/server/game/Movement/MovementGenerators/TargetedMovementGenerator.h
+++ src/server/game/Movement/MovementGenerators/TargetedMovementGenerator.h
@@ -38,10 +38,10 @@
 class TargetedMovementGeneratorMedium : public MovementGeneratorMedium< T, D >, public TargetedMovementGeneratorBase
 {
     protected:
-        TargetedMovementGeneratorMedium(Unit* target, float offset, float angle) :
+        TargetedMovementGeneratorMedium(Unit* target, float offset, float angle, uint32 spellId = 0) :
             TargetedMovementGeneratorBase(target), i_path(NULL),
             i_recheckDistance(0), i_offset(offset), i_angle(angle),
-            i_recalculateTravel(false), i_targetReached(false)
+            i_recalculateTravel(false), i_targetReached(false), i_spell(spellId)
         {
         }
         ~TargetedMovementGeneratorMedium() { delete i_path; }
@@ -70,8 +71,8 @@
     public:
         ChaseMovementGenerator(Unit* target)
             : TargetedMovementGeneratorMedium<T, ChaseMovementGenerator<T> >(target) {}
-        ChaseMovementGenerator(Unit* target, float offset, float angle)
-            : TargetedMovementGeneratorMedium<T, ChaseMovementGenerator<T> >(target, offset, angle) {}
+        ChaseMovementGenerator(Unit* target, float offset, float angle, uint32 spellId = 0)
+            : TargetedMovementGeneratorMedium<T, ChaseMovementGenerator<T> >(target, offset, angle, spellId) {}
         ~ChaseMovementGenerator() {}
 
         MovementGeneratorType GetMovementGeneratorType() { return CHASE_MOTION_TYPE; }
@@ -94,8 +95,8 @@
     public:
         FollowMovementGenerator(Unit* target)
             : TargetedMovementGeneratorMedium<T, FollowMovementGenerator<T> >(target){}
-        FollowMovementGenerator(Unit* target, float offset, float angle)
-            : TargetedMovementGeneratorMedium<T, FollowMovementGenerator<T> >(target, offset, angle) {}
+        FollowMovementGenerator(Unit* target, float offset, float angle, uint32 spellId = 0)
+            : TargetedMovementGeneratorMedium<T, FollowMovementGenerator<T> >(target, offset, angle, spellId) {}
         ~FollowMovementGenerator() {}
 
         MovementGeneratorType GetMovementGeneratorType() { return FOLLOW_MOTION_TYPE; }
